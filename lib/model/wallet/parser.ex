defmodule ExLemonway.Wallet.Parser do
  @moduledoc """
  Parser to map raw response into Wallet model struct.

  It's automatically generated by `mix specs.gen.model Wallet`
  Dont' edit this file manually, to make any changes, please update:
  `specs/directkit/model/wallet.json`
  """

  alias ExLemonway.Wallet
  alias ExLemonway.Util.ModelParser

  @doc """
  Convert map with string based keys, to a fixed model struct.
  """
  @spec to_struct(map()) :: {:ok, Wallet.t()} | {:error, :parsing_failed}
  def to_struct(raw_data) when is_map(raw_data) do
    ModelParser.to_struct(raw_data, ExLemonway.Wallet)
  end

  @doc """
  Convert map with string based keys, to a fixed model struct.
  """
  @spec to_payload(Wallet.t()) :: {:ok, map()} | {:error, :export_failed}
  def to_payload(%Wallet{} = model) do
    ModelParser.to_payload(model)
  end

  @doc """
  Infer model alias by raw string key.
  """
  @spec submodel_name(String.t()) :: atom()
  def submodel_name("CARDS"), do: Card
  def submodel_name("DOCS"), do: Doc
  def submodel_name("IBANS"), do: Iban
  def submodel_name("SDDMANDATES"), do: SddMandate
  def submodel_name("LIMITS"), do: WalletLimit
  def submodel_name(_), do: :not_a_model

  @doc """
  Get type for specific field.
  """
  @spec field_type(String.t()) :: atom()
  def field_type("BAL"), do: :string
  def field_type("BLOCKED"), do: :boolean
  def field_type("BirthCity"), do: :string
  def field_type("BirthCountry"), do: :string
  def field_type("BirthDate"), do: :string
  def field_type("CARDS"), do: submodel_name("CARDS")
  def field_type("City"), do: :string
  def field_type("ClientTitle"), do: :string
  def field_type("CompanyDescription"), do: :string
  def field_type("CompanyIdentificationNumber"), do: :string
  def field_type("CompanyName"), do: :string
  def field_type("CompanyWebsite"), do: :string
  def field_type("Country"), do: :string
  def field_type("DOCS"), do: submodel_name("DOCS")
  def field_type("EMAIL"), do: :string
  def field_type("FirstName"), do: :string
  def field_type("IBANS"), do: submodel_name("IBANS")
  def field_type("ID"), do: :string
  def field_type("IsCompany"), do: :string
  def field_type("IsOneTimeCustomer"), do: :string
  def field_type("IsTechWallet"), do: :string
  def field_type("LIMITS"), do: submodel_name("LIMITS")
  def field_type("LWID"), do: :string
  def field_type("LastName"), do: :string
  def field_type("MobileNumber"), do: :string
  def field_type("NAME"), do: :string
  def field_type("Nationality"), do: :string
  def field_type("PhoneNumber"), do: :string
  def field_type("PostCode"), do: :string
  def field_type("SDDMANDATES"), do: submodel_name("SDDMANDATES")
  def field_type("STATUS"), do: :string
  def field_type("Street"), do: :string

  @doc """
  Convert raw string key into struct key atom.
  """
  @spec field_to_key(String.t()) :: atom() | nil
  def field_to_key("BAL"), do: :bal
  def field_to_key("BLOCKED"), do: :blocked
  def field_to_key("BirthCity"), do: :birth_city
  def field_to_key("BirthCountry"), do: :birth_country
  def field_to_key("BirthDate"), do: :birth_date
  def field_to_key("CARDS"), do: :cards
  def field_to_key("City"), do: :city
  def field_to_key("ClientTitle"), do: :client_title
  def field_to_key("CompanyDescription"), do: :company_description
  def field_to_key("CompanyIdentificationNumber"), do: :company_identification_number
  def field_to_key("CompanyName"), do: :company_name
  def field_to_key("CompanyWebsite"), do: :company_website
  def field_to_key("Country"), do: :country
  def field_to_key("DOCS"), do: :docs
  def field_to_key("EMAIL"), do: :email
  def field_to_key("FirstName"), do: :first_name
  def field_to_key("IBANS"), do: :ibans
  def field_to_key("ID"), do: :id
  def field_to_key("IsCompany"), do: :is_company
  def field_to_key("IsOneTimeCustomer"), do: :is_one_time_customer
  def field_to_key("IsTechWallet"), do: :is_tech_wallet
  def field_to_key("LIMITS"), do: :limits
  def field_to_key("LWID"), do: :lwid
  def field_to_key("LastName"), do: :last_name
  def field_to_key("MobileNumber"), do: :mobile_number
  def field_to_key("NAME"), do: :name
  def field_to_key("Nationality"), do: :nationality
  def field_to_key("PhoneNumber"), do: :phone_number
  def field_to_key("PostCode"), do: :post_code
  def field_to_key("SDDMANDATES"), do: :sddmandates
  def field_to_key("STATUS"), do: :status
  def field_to_key("Street"), do: :street
  def field_to_key(_), do: nil

  @doc """
  Convert atomic key to original string key.
  """
  @spec key_to_field(atom()) :: String.t()
  def key_to_field(:bal), do: "BAL"
  def key_to_field(:blocked), do: "BLOCKED"
  def key_to_field(:birth_city), do: "BirthCity"
  def key_to_field(:birth_country), do: "BirthCountry"
  def key_to_field(:birth_date), do: "BirthDate"
  def key_to_field(:cards), do: "CARDS"
  def key_to_field(:city), do: "City"
  def key_to_field(:client_title), do: "ClientTitle"
  def key_to_field(:company_description), do: "CompanyDescription"
  def key_to_field(:company_identification_number), do: "CompanyIdentificationNumber"
  def key_to_field(:company_name), do: "CompanyName"
  def key_to_field(:company_website), do: "CompanyWebsite"
  def key_to_field(:country), do: "Country"
  def key_to_field(:docs), do: "DOCS"
  def key_to_field(:email), do: "EMAIL"
  def key_to_field(:first_name), do: "FirstName"
  def key_to_field(:ibans), do: "IBANS"
  def key_to_field(:id), do: "ID"
  def key_to_field(:is_company), do: "IsCompany"
  def key_to_field(:is_one_time_customer), do: "IsOneTimeCustomer"
  def key_to_field(:is_tech_wallet), do: "IsTechWallet"
  def key_to_field(:limits), do: "LIMITS"
  def key_to_field(:lwid), do: "LWID"
  def key_to_field(:last_name), do: "LastName"
  def key_to_field(:mobile_number), do: "MobileNumber"
  def key_to_field(:name), do: "NAME"
  def key_to_field(:nationality), do: "Nationality"
  def key_to_field(:phone_number), do: "PhoneNumber"
  def key_to_field(:post_code), do: "PostCode"
  def key_to_field(:sddmandates), do: "SDDMANDATES"
  def key_to_field(:status), do: "STATUS"
  def key_to_field(:street), do: "Street"

  @doc """
  Convert raw string key into struct key atom.
  """
  @spec is_value_valid?(atom(), any()) :: boolean()
  def is_value_valid?(:bal, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :bal, "string", value)

  def is_value_valid?(:blocked, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :blocked, "1", value)

  def is_value_valid?(:birth_city, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :birth_city, "string", value)

  def is_value_valid?(:birth_country, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :birth_country, "string", value)

  def is_value_valid?(:birth_date, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :birth_date, "string", value)

  def is_value_valid?(:city, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :city, "string", value)

  def is_value_valid?(:client_title, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :client_title, "string", value)

  def is_value_valid?(:company_description, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :company_description, "string", value)

  def is_value_valid?(:company_identification_number, value),
    do:
      ModelParser.is_key_value_valid?(__MODULE__, :company_identification_number, "string", value)

  def is_value_valid?(:company_name, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :company_name, "string", value)

  def is_value_valid?(:company_website, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :company_website, "string", value)

  def is_value_valid?(:country, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :country, "string", value)

  def is_value_valid?(:email, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :email, "string", value)

  def is_value_valid?(:first_name, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :first_name, "string", value)

  def is_value_valid?(:id, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :id, "string", value)

  def is_value_valid?(:is_company, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :is_company, "string", value)

  def is_value_valid?(:is_one_time_customer, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :is_one_time_customer, "string", value)

  def is_value_valid?(:is_tech_wallet, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :is_tech_wallet, "string", value)

  def is_value_valid?(:limits, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :limits, "WalletLimit", value)

  def is_value_valid?(:lwid, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :lwid, "string", value)

  def is_value_valid?(:last_name, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :last_name, "string", value)

  def is_value_valid?(:mobile_number, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :mobile_number, "string", value)

  def is_value_valid?(:name, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :name, "string", value)

  def is_value_valid?(:nationality, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :nationality, "string", value)

  def is_value_valid?(:phone_number, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :phone_number, "string", value)

  def is_value_valid?(:post_code, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :post_code, "string", value)

  def is_value_valid?(:status, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :status, "string", value)

  def is_value_valid?(:street, value),
    do: ModelParser.is_key_value_valid?(__MODULE__, :street, "string", value)

  @doc """
  Convert Lemonway value to struct expectations.
  """
  @spec transform_input_value(atom(), any()) :: any()
  def transform_input_value(:bal, value),
    do: ModelParser.transform_input_value(__MODULE__, :bal, "string", value)

  def transform_input_value(:blocked, value),
    do: ModelParser.transform_input_value(__MODULE__, :blocked, "1", value)

  def transform_input_value(:birth_city, value),
    do: ModelParser.transform_input_value(__MODULE__, :birth_city, "string", value)

  def transform_input_value(:birth_country, value),
    do: ModelParser.transform_input_value(__MODULE__, :birth_country, "string", value)

  def transform_input_value(:birth_date, value),
    do: ModelParser.transform_input_value(__MODULE__, :birth_date, "string", value)

  def transform_input_value(:city, value),
    do: ModelParser.transform_input_value(__MODULE__, :city, "string", value)

  def transform_input_value(:client_title, value),
    do: ModelParser.transform_input_value(__MODULE__, :client_title, "string", value)

  def transform_input_value(:company_description, value),
    do: ModelParser.transform_input_value(__MODULE__, :company_description, "string", value)

  def transform_input_value(:company_identification_number, value),
    do:
      ModelParser.transform_input_value(
        __MODULE__,
        :company_identification_number,
        "string",
        value
      )

  def transform_input_value(:company_name, value),
    do: ModelParser.transform_input_value(__MODULE__, :company_name, "string", value)

  def transform_input_value(:company_website, value),
    do: ModelParser.transform_input_value(__MODULE__, :company_website, "string", value)

  def transform_input_value(:country, value),
    do: ModelParser.transform_input_value(__MODULE__, :country, "string", value)

  def transform_input_value(:email, value),
    do: ModelParser.transform_input_value(__MODULE__, :email, "string", value)

  def transform_input_value(:first_name, value),
    do: ModelParser.transform_input_value(__MODULE__, :first_name, "string", value)

  def transform_input_value(:id, value),
    do: ModelParser.transform_input_value(__MODULE__, :id, "string", value)

  def transform_input_value(:is_company, value),
    do: ModelParser.transform_input_value(__MODULE__, :is_company, "string", value)

  def transform_input_value(:is_one_time_customer, value),
    do: ModelParser.transform_input_value(__MODULE__, :is_one_time_customer, "string", value)

  def transform_input_value(:is_tech_wallet, value),
    do: ModelParser.transform_input_value(__MODULE__, :is_tech_wallet, "string", value)

  def transform_input_value(:limits, value),
    do: ModelParser.transform_input_value(__MODULE__, :limits, "WalletLimit", value)

  def transform_input_value(:lwid, value),
    do: ModelParser.transform_input_value(__MODULE__, :lwid, "string", value)

  def transform_input_value(:last_name, value),
    do: ModelParser.transform_input_value(__MODULE__, :last_name, "string", value)

  def transform_input_value(:mobile_number, value),
    do: ModelParser.transform_input_value(__MODULE__, :mobile_number, "string", value)

  def transform_input_value(:name, value),
    do: ModelParser.transform_input_value(__MODULE__, :name, "string", value)

  def transform_input_value(:nationality, value),
    do: ModelParser.transform_input_value(__MODULE__, :nationality, "string", value)

  def transform_input_value(:phone_number, value),
    do: ModelParser.transform_input_value(__MODULE__, :phone_number, "string", value)

  def transform_input_value(:post_code, value),
    do: ModelParser.transform_input_value(__MODULE__, :post_code, "string", value)

  def transform_input_value(:status, value),
    do: ModelParser.transform_input_value(__MODULE__, :status, "string", value)

  def transform_input_value(:street, value),
    do: ModelParser.transform_input_value(__MODULE__, :street, "string", value)

  @doc """
  Convert model value to a payload format.
  """
  @spec transform_output_value(atom(), any()) :: any()
  def transform_output_value(:bal, value),
    do: ModelParser.transform_output_value(__MODULE__, :bal, "string", value)

  def transform_output_value(:blocked, value),
    do: ModelParser.transform_output_value(__MODULE__, :blocked, "1", value)

  def transform_output_value(:birth_city, value),
    do: ModelParser.transform_output_value(__MODULE__, :birth_city, "string", value)

  def transform_output_value(:birth_country, value),
    do: ModelParser.transform_output_value(__MODULE__, :birth_country, "string", value)

  def transform_output_value(:birth_date, value),
    do: ModelParser.transform_output_value(__MODULE__, :birth_date, "string", value)

  def transform_output_value(:city, value),
    do: ModelParser.transform_output_value(__MODULE__, :city, "string", value)

  def transform_output_value(:client_title, value),
    do: ModelParser.transform_output_value(__MODULE__, :client_title, "string", value)

  def transform_output_value(:company_description, value),
    do: ModelParser.transform_output_value(__MODULE__, :company_description, "string", value)

  def transform_output_value(:company_identification_number, value),
    do:
      ModelParser.transform_output_value(
        __MODULE__,
        :company_identification_number,
        "string",
        value
      )

  def transform_output_value(:company_name, value),
    do: ModelParser.transform_output_value(__MODULE__, :company_name, "string", value)

  def transform_output_value(:company_website, value),
    do: ModelParser.transform_output_value(__MODULE__, :company_website, "string", value)

  def transform_output_value(:country, value),
    do: ModelParser.transform_output_value(__MODULE__, :country, "string", value)

  def transform_output_value(:email, value),
    do: ModelParser.transform_output_value(__MODULE__, :email, "string", value)

  def transform_output_value(:first_name, value),
    do: ModelParser.transform_output_value(__MODULE__, :first_name, "string", value)

  def transform_output_value(:id, value),
    do: ModelParser.transform_output_value(__MODULE__, :id, "string", value)

  def transform_output_value(:is_company, value),
    do: ModelParser.transform_output_value(__MODULE__, :is_company, "string", value)

  def transform_output_value(:is_one_time_customer, value),
    do: ModelParser.transform_output_value(__MODULE__, :is_one_time_customer, "string", value)

  def transform_output_value(:is_tech_wallet, value),
    do: ModelParser.transform_output_value(__MODULE__, :is_tech_wallet, "string", value)

  def transform_output_value(:limits, value),
    do: ModelParser.transform_output_value(__MODULE__, :limits, "WalletLimit", value)

  def transform_output_value(:lwid, value),
    do: ModelParser.transform_output_value(__MODULE__, :lwid, "string", value)

  def transform_output_value(:last_name, value),
    do: ModelParser.transform_output_value(__MODULE__, :last_name, "string", value)

  def transform_output_value(:mobile_number, value),
    do: ModelParser.transform_output_value(__MODULE__, :mobile_number, "string", value)

  def transform_output_value(:name, value),
    do: ModelParser.transform_output_value(__MODULE__, :name, "string", value)

  def transform_output_value(:nationality, value),
    do: ModelParser.transform_output_value(__MODULE__, :nationality, "string", value)

  def transform_output_value(:phone_number, value),
    do: ModelParser.transform_output_value(__MODULE__, :phone_number, "string", value)

  def transform_output_value(:post_code, value),
    do: ModelParser.transform_output_value(__MODULE__, :post_code, "string", value)

  def transform_output_value(:status, value),
    do: ModelParser.transform_output_value(__MODULE__, :status, "string", value)

  def transform_output_value(:street, value),
    do: ModelParser.transform_output_value(__MODULE__, :street, "string", value)

  @doc """
  Read parser's custom config.
  """
  @spec config(atom(), any()) :: any()
  def config(key, default \\ nil) do
    Application.get_env(:ex_lemonway, __MODULE__, [])
    |> Keyword.get(key, default)
  end
end
